// Generated by Copilot

/**
 * Initialize the client management dashboard
 * Sets up event listeners and initializes components
 */
const initDashboard = () => {
  // Initialize Saffron components
  initSaffronComponents();
  
  // Set up event listeners
  setupEventListeners();
  
  // Load any initial data (simulation for demo)
  loadDashboardData();
};

/**
 * Initialize Saffron components with any custom settings
 */
const initSaffronComponents = () => {
  // Check if all required components are defined/loaded
  const requiredComponents = [
    'tr-navigation',
    'tr-button',
    'tr-icon',
    'tr-card',
    'tr-select',
    'tr-table',
    'tr-badge',
    'tr-pagination',
    'tr-avatar',
    'tr-logo'
  ];
  
  // Log any missing components for debugging
  const missingComponents = requiredComponents.filter(
    component => !customElements.get(component)
  );
  
  if (missingComponents.length > 0) {
    console.warn('Missing Saffron components:', missingComponents);
  }
};

/**
 * Set up event listeners for interactive elements
 */
const setupEventListeners = () => {
  // Add client button event
  const addClientBtn = document.querySelector('tr-button[appearance="primary"]');
  if (addClientBtn) {
    addClientBtn.addEventListener('click', handleAddClient);
  }
  
  // Filter dropdown change event
  const filterSelect = document.querySelector('tr-select');
  if (filterSelect) {
    filterSelect.addEventListener('change', handleFilterChange);
  }
  
  // Navigation item click events
  const navItems = document.querySelectorAll('tr-navigation-item');
  navItems.forEach(item => {
    item.addEventListener('click', (e) => handleNavigation(e, item));
  });
  
  // Table action buttons
  const actionButtons = document.querySelectorAll('tr-table-cell tr-button');
  actionButtons.forEach(button => {
    button.addEventListener('click', handleActionButton);
  });
  
  // Pagination
  const pagination = document.querySelector('tr-pagination');
  if (pagination) {
    pagination.addEventListener('page-change', handlePageChange);
  }

  // Customize view button event
  const customizeViewBtn = document.getElementById('customizeViewBtn');
  if (customizeViewBtn) {
    customizeViewBtn.addEventListener('click', openModal);
  }

  // Close modal button event
  const closeModalBtn = document.getElementById('closeModalBtn');
  if (closeModalBtn) {
    closeModalBtn.addEventListener('click', closeModal);
  }

  // Cancel button event
  const cancelBtn = document.getElementById('cancelBtn');
  if (cancelBtn) {
    cancelBtn.addEventListener('click', closeModal);
  }

  // Modal overlay click event
  const modalOverlay = document.getElementById('modalOverlay');
  if (modalOverlay) {
    modalOverlay.addEventListener('click', closeModal);
  }

  // Tab switching listeners
  const tabItems = document.querySelectorAll('.tab-item');
  tabItems.forEach(tab => {
    tab.addEventListener('click', switchTab);
  });

  // Keyboard guide toggle
  const disclosureButton = document.querySelector('.disclosure-button');
  if (disclosureButton) {
    disclosureButton.addEventListener('click', toggleKeyboardGuide);
  }

  // Add condition button
  const addConditionBtn = document.querySelector('.add-condition-button');
  if (addConditionBtn) {
    addConditionBtn.addEventListener('click', addCondition);
  }
};

/**
 * Handle adding a new client
 * @param {Event} e - Click event
 */
const handleAddClient = (e) => {
  // In a real app, this would open a modal or navigate to a form
  console.log('Add client clicked');
  alert('Add Client feature would open here');
};

/**
 * Handle filter change
 * @param {Event} e - Change event
 */
const handleFilterChange = (e) => {
  const value = e.target.value;
  console.log(`Filter changed to: ${value}`);
  
  // In a real app, this would filter the table data
  const tableRows = document.querySelectorAll('tr-table-row');
  
  // Simple simulation of filtering
  if (value === 'active') {
    tableRows.forEach(row => {
      const statusCell = row.querySelector('tr-table-cell:nth-child(2)');
      if (statusCell && !statusCell.textContent.includes('Active')) {
        row.style.display = 'none';
      } else {
        row.style.display = '';
      }
    });
  } else if (value === 'pending') {
    tableRows.forEach(row => {
      const statusCell = row.querySelector('tr-table-cell:nth-child(2)');
      if (statusCell && !statusCell.textContent.includes('Pending')) {
        row.style.display = 'none';
      } else {
        row.style.display = '';
      }
    });
  } else {
    // Show all
    tableRows.forEach(row => {
      row.style.display = '';
    });
  }
};

/**
 * Handle navigation click
 * @param {Event} e - Click event
 * @param {HTMLElement} item - The navigation item clicked
 */
const handleNavigation = (e, item) => {
  // Remove selected from all items
  const navItems = document.querySelectorAll('tr-navigation-item');
  navItems.forEach(navItem => {
    navItem.removeAttribute('selected');
  });
  
  // Add selected to clicked item
  item.setAttribute('selected', '');
  
  // In a real app, this would navigate to different sections
  console.log(`Navigation changed to: ${item.textContent.trim()}`);
};

/**
 * Handle action buttons in the table
 * @param {Event} e - Click event
 */
const handleActionButton = (e) => {
  const button = e.currentTarget;
  const iconName = button.querySelector('tr-icon').getAttribute('name');
  const row = button.closest('tr-table-row');
  const clientName = row.querySelector('tr-table-cell:first-child').textContent;
  
  if (iconName === 'eye') {
    console.log(`View details for client: ${clientName}`);
    alert(`Viewing details for ${clientName}`);
  } else if (iconName === 'edit') {
    console.log(`Edit client: ${clientName}`);
    alert(`Editing ${clientName}`);
  }
};

/**
 * Handle pagination changes
 * @param {CustomEvent} e - Pagination event
 */
const handlePageChange = (e) => {
  const page = e.detail.page;
  console.log(`Page changed to: ${page}`);
  // In a real app, this would load new data for the table
};

/**
 * Load dashboard data (simulated)
 */
const loadDashboardData = () => {
  // In a real app, this would fetch data from an API
  console.log('Loading dashboard data...');
  
  // Simulate a loading delay
  setTimeout(() => {
    console.log('Dashboard data loaded');
  }, 500);
};

// Modal functionality
const openModal = () => {
  const customizeModal = document.getElementById('customizeModal');
  const modalOverlay = document.getElementById('modalOverlay');
  customizeModal.classList.add('open');
  modalOverlay.classList.add('open');
  document.body.style.overflow = 'hidden'; // Prevent scrolling behind modal
  
  // Accessibility: Set focus on the first focusable element
  setTimeout(() => {
    const closeModalBtn = document.getElementById('closeModalBtn');
    closeModalBtn.focus();
  }, 100);
};

const closeModal = () => {
  const customizeModal = document.getElementById('customizeModal');
  const modalOverlay = document.getElementById('modalOverlay');
  customizeModal.classList.remove('open');
  modalOverlay.classList.remove('open');
  document.body.style.overflow = ''; // Restore scrolling
  
  // Return focus to the element that opened the modal
  const customizeViewBtn = document.getElementById('customizeViewBtn');
  customizeViewBtn.focus();
};

// Tab switching
const switchTab = (event) => {
  const tabItems = document.querySelectorAll('.tab-item');
  // Remove active class from all tabs
  tabItems.forEach(item => {
    item.classList.remove('active');
  });
  
  // Add active class to clicked tab
  event.currentTarget.classList.add('active');
  
  // Here you would also handle showing/hiding tab content
  const tabName = event.currentTarget.getAttribute('data-tab');
  console.log(`Switched to ${tabName} tab`);
  
  // Additional logic for tab content switching would go here
};

// Keyboard guide disclosure functionality
const toggleKeyboardGuide = () => {
  const disclosureButton = document.querySelector('.disclosure-button');
  // Toggle the keyboard guide visibility
  const caretIcon = disclosureButton.querySelector('i');
  
  // Toggle between right and down caret
  if (caretIcon.classList.contains('fa-caret-right')) {
    caretIcon.classList.remove('fa-caret-right');
    caretIcon.classList.add('fa-caret-down');
    
    // Here you would show the keyboard guide content
    console.log('Keyboard guide opened');
  } else {
    caretIcon.classList.remove('fa-caret-down');
    caretIcon.classList.add('fa-caret-right');
    
    // Here you would hide the keyboard guide content
    console.log('Keyboard guide closed');
  }
};

// Add new condition row
const addCondition = () => {
  // Logic for adding a new condition row would go here
  console.log('Adding new condition');
  
  // This would create and append a new logic row to the container
};

// Initialize the dashboard when the DOM is fully loaded
document.addEventListener('DOMContentLoaded', initDashboard);

// Add support for keyboard navigation for accessibility
document.addEventListener('keydown', (e) => {
  // Handle Escape key
  if (e.key === 'Escape') {
    // Close any open dialogs or dropdowns
    console.log('Escape key pressed - would close dialogs');
  }
  
  // Add more keyboard shortcuts as needed
});

// Keyboard accessibility for the modal
document.addEventListener('keydown', (event) => {
  const customizeModal = document.getElementById('customizeModal');
  if (customizeModal.classList.contains('open')) {
    // Close modal on ESC key
    if (event.key === 'Escape') {
      closeModal();
    }
    
    // Trap focus inside modal
    if (event.key === 'Tab') {
      // Get all focusable elements in the modal
      const focusableElements = customizeModal.querySelectorAll(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
      );
      
      const firstElement = focusableElements[0];
      const lastElement = focusableElements[focusableElements.length - 1];
      
      // If shift + tab and focus is on first element, move to last element
      if (event.shiftKey && document.activeElement === firstElement) {
        event.preventDefault();
        lastElement.focus();
      }
      // If tab and focus is on last element, move to first element
      else if (!event.shiftKey && document.activeElement === lastElement) {
        event.preventDefault();
        firstElement.focus();
      }
    }
  }
});

// Initialize any other components or functionalities
document.addEventListener('DOMContentLoaded', () => {
  console.log('Client Management Dashboard initialized');
  
  // Additional initialization code would go here
});